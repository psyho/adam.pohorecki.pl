<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Adam Pohorecki]]></title>
  <link href="http://adam.pohorecki.pl/atom.xml" rel="self"/>
  <link href="http://adam.pohorecki.pl/"/>
  <updated>2013-03-15T16:10:38+01:00</updated>
  <id>http://adam.pohorecki.pl/</id>
  <author>
    <name><![CDATA[Adam Pohorecki]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Lean Startup]]></title>
    <link href="http://adam.pohorecki.pl/blog/2012/06/24/lean-startup/"/>
    <updated>2012-06-24T02:25:00+02:00</updated>
    <id>http://adam.pohorecki.pl/blog/2012/06/24/lean-startup</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://adam.pohorecki.pl/images/blog/lean-startup.png" title="Lean Startup cover" ></p>

<p>I recently read the <a href="http://theleanstartup.com/book">&#8220;Lean Startup&#8221; book by Eric Ries</a> which I can recommend to anyone involved in software development, not just people working with technology startups, like the title suggests.</p>

<p>The book describes a process, which can be used to make innovation more manageable and directed using the Lean Manufacturing principles combined with metrics-driven-development.
It is written with entrepreneurs in mind, but it also touches on topics such as Continuous Deployment and automated testing, which are important to me.</p>

<!--more-->


<h2>The problem solved by Lean Startup movement</h2>

<p>In my career, I have seen a certain mistake repeated too many times.
I call this mistake &#8220;feature overload&#8221;.
It happens when a product, based on someone&#8217;s arbitrary decision, is gradually extended with features that don&#8217;t necessarily add value, until it&#8217;s so slow and bloated that it has to be rewritten or fails altogether.</p>

<p>If you are a programmer, you might recognize this smell from code.
The principle of avoiding this kind of mistakes is called <a href="http://en.wikipedia.org/wiki/You_ain't_gonna_need_it">YAGNI</a> (You Ain&#8217;t Gonna Need It).</p>

<p>BDD advises that we write our User Stories in form &#8221;<strong>In order to&#8230;</strong>, As a &#8230;, I want to&#8230;&#8221;.
This first clause ensures, that the features we implement, are actually ones that are needed to improve the product.</p>

<p>Lean Startup takes this idea much further by applying scientific principles.
It obligates us to measure how the users react, and based on that, validate whether the feature actually brings value or not.
If a feature does not bring us closer to the goal, then it should be removed.</p>

<h2>Extending the Definition of Done (DoD)</h2>

<p>Typically, a Definition of Done in Scrum looks something like this:</p>

<ul>
<li>implemented</li>
<li>passed the code review</li>
<li>tested</li>
<li>accepted by the client</li>
<li>deployed</li>
</ul>


<p>Lean startup appends another item to that definition: &#8220;validated&#8221;.
This means that for every feature deployed you would run a <a href="http://en.wikipedia.org/wiki/A/B_testing">split test</a> with the feature enabled and disabled and based on the metrics gathered during the experiment, you would consider whether this feature is worth keeping or not.</p>

<p>It is worth noting that unvalidated features count toward the Work in Progress limit in Kanban, so this limits your development speed to how fast you can deploy and validate features, since only a limited number of split tests can usually be run at once.</p>

<h2>Continuous Deployment</h2>

<p>As you can probably see already, projects that take advantage of the Lean Startup methodology are ideal candidates for Continuous Delivery (or Deployment):</p>

<ul>
<li>If you need to a/b test everything, then you must have feature switches implemented.</li>
<li>If the process requires you to deploy often, you can&#8217;t probably just do that at the end of iteration.</li>
</ul>


<h2>TDD and Lean Startup</h2>

<p>Ron Jeffries wrote a blog post a couple of years ago about <a href="http://xprogramming.com/blog/what-is-really-essential/">why you can&#8217;t do iterative development without writing automated tests</a>.
It essentially states that if you want to release often, you need to test everything just as often, and that&#8217;s impossible to do that by hand.</p>

<p>Obviously, if you want to deploy each time a feature is implemented, this becomes even harder, so you need automated tests even more.</p>

<p>Ries in his book does agree with the fact that you need an extensive automated test suite, however he considers automated <em>unit</em> tests a from of waste and advocates writing end to end tests instead.</p>

<p>The opinion that isolated unit tests are of limited use is often heard amongst people who don&#8217;t practice TDD.
I believe in the opposite: isolated unit tests are the most valuable tests you can write, while the end-to-end tests are the ones that provide the least value.</p>

<h3>Tests are about feedback</h3>

<p>Imagine you have a test suite that takes an hour to run.
How often would you run it during your regular development?
Would you even run it locally?
I know I would not.</p>

<p>Now imagine your test suite takes 15 seconds to run (1-2s for unit tests and the rest for integration tests).
Would you run it locally?
Maybe even each time you save a file?</p>

<p>If you tests are slow, nobody runs them except for your CI server.
End to end tests tend to depend on the structure of your markup and often are brittle and unstable.</p>

<p>Fast tests give you confidence to change and refactor your code, and if you follow one simple rule of mocking (<strong>don&#8217;t mock what you don&#8217;t own</strong>), you will rarely fall into the trap of mocking too much.
When unit tests fail, they point you almost exactly to where the failure occurred, which reduces the time spent debugging.</p>

<p>I strongly believe that TDD is a technique that eliminates waste and makes rapid change possible. I think it should be a core practice for every lean startup.</p>

<h2>Cohort Analysis</h2>

<p>Cohort Analysis is a technique that I first read about in the Lean Startup book.
It is optimized to give you feedback on how the changes you introduce modify your user&#8217;s behavior.</p>

<p>For example, let&#8217;s say you implemented a feature that awards users certain amount of points when they visit the site each day.
Your hypothesis is that this will increase the user retention.</p>

<p>To validate your hypothesis you run a split test with the new feature enabled for some portion of the new users arriving at your website.
You measure how many users visit your site, register and how many of the registered has returned to the site at least 3 times.</p>

<p>At the end of the experiment, you present your metrics as a percentage of the overall number of visitors in the given segment.
In theory, the percentage of users who register should not vary significantly, but the percentage of users returning to the site should increase.</p>

<p>I really like how lean startup forces you to define your acceptance criteria in terms of things that can actually be measured.</p>

<h2>The 5 Whys</h2>

<p>Another interesting technique, which I first encountered in Eric Ries&#8217;s book is <a href="http://en.wikipedia.org/wiki/5_Whys">&#8220;The 5 Whys Technique&#8221;</a>.</p>

<p>It is a technique for determining the root cause of a problem by asking the question &#8220;Why&#8230;?&#8221; (kind of like children do) five times in a row.
You do this every time something goes wrong (like when you deploy not working software to production, or when you go over the WIP limit on a Kanban board).
Once you get answers to the 5 questions, you can apply an amount of effort proportional to the scale of the problem, to each of the problems that came up as answers to the questions.
This way you get to improve and make your process more resistant to failure, but you also make sure that you don&#8217;t spend too much time on things that don&#8217;t happen often or are not too important.</p>

<h2>Final remarks</h2>

<p>Agile development methodologies tell us to embrace change, which is a great step forward comparing to the old waterfall/change-request days.
However they do not give us a way to judge which features are more important, and which are not.
This is a problem, because it involves a lot of guesswork and politics.</p>

<p>Lean startup gives us a way of making feature decisions based on hard data and facilitates building the right product, not just a product the right way.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress - the Good, the Bad and the Ugly]]></title>
    <link href="http://adam.pohorecki.pl/blog/2012/01/17/octopress-the-good-the-bad-and-the-ugly/"/>
    <updated>2012-01-17T17:11:00+01:00</updated>
    <id>http://adam.pohorecki.pl/blog/2012/01/17/octopress-the-good-the-bad-and-the-ugly</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://adam.pohorecki.pl/images/blog/octopress.png" title="Octopress logo" ></p>

<p>To inaugurate my blog, I decided that I am going to review the tool, which I use to manage it - <a href="http://octopress.org">Octopress</a>, the self-proclaimed &#8220;blogging framework for hackers&#8221;.</p>

<p>I have been using Octopress to manage the <a href="http://sckrk.com">Software Craftsmanship in Krak√≥w</a> blog for a couple of months now, and now I decided to use it for my personal blog.
This post will explain why I chose it, and what I don&#8217;t like about it.</p>

<!--more-->


<h2>TL;DR</h2>

<p>Octopress is great for programmers who want to take advantage of GitHub or Heroku for hosting their blog, it requires very little setup and comes &#8220;with batteries included&#8221;.</p>

<p>However, it should be made into a gem, because forking the project on GitHub and working on the same source tree as the developer feels more than a bit &#8220;hackish&#8221;.</p>

<h2>Using Octopress</h2>

<p>Octopress is a static site generator, that specializes in blogging, as oposed to some other solutions like <a href="http://nanoc.stoneship.org/">Nanoc</a>, which are more generic in nature.</p>

<p>If you want to use Octopress, you should either fork the repo on GitHub or add it as a remote to your existing repository.
After that all you need to do is invoke <code>rake install</code>, modify a few config values and you are ready to start adding content.</p>

<p>Deploying to various destinations can be done with <code>rake deploy</code> after some setup.
The setup modifies the Rakefile that comes with Octopress, which in turn generates conflicts when you update later.
Out of the box, Octopress supports GitHub Pages, Heroku and Rsync as deployment options.</p>

<h2>The good</h2>

<p>The very best feature of Octopress is the &#8220;batteries included&#8221; approach, which I mentioned earlier.</p>

<p>It comes with a bunch of plugins, like Twitter and GitHub integration, Disqus comments, deployment tasks and others.
The default template is mobile friendly, and will adjust according to the screen size.</p>

<p>Having so much from the get go saves you quite a lot of setup compared to some other solutions, so you can have a blog live in minutes after you install the tool.</p>

<p>Compared to Wordpress, Octopress is also much easier to customize, and the templates are much cleaner - it uses Mustache for templates and SASS for styles.
Also using Markdown for composing posts and VIM (does not come with Octopress;) for editing them is much more convenient than Wordpress&#8217;s WYSIWYG editor.</p>

<p>As a static page generator, Octopress also has the advantage of easily backing up the blog content and versioning it, especially compared to the database backed tools like Wordpress.
Now I have an (almost) full copy of the blog data everywhere I check it out and on GitHub.
This is a huge win, because you don&#8217;t want to worry about loosing your data.</p>

<p>Another great thing about Octopress is Solarized theme for syntax highlighting.
Check it out:</p>

<figure class='code'><figcaption><span>Sample of syntax highliting</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">hello_world</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Octopress is awesome!&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>The bad</h2>

<p>The biggest downside of Octopress for me is that <a href="http://sciruby.com/">almost</a> <a href="http://www.telenet.com.au/">every</a> <a href="http://jcsims.me/">blog</a> <a href="http://www.mariovisic.com/">which</a> <a href="http://hairysun.com/">uses</a> <a href="http://yagnesh.org/">it</a> <a href="http://nomedojogo.com/">looks</a> <a href="http://trucsdedev.com/">almost</a> <a href="http://duffomelia.com/">exactly</a> <a href="http://depth-first.com/">the</a> <a href="http://www.uru.ch/">same</a>.
You can customize colors very easily and even modify the templates that come with the default theme, but modifying colors is usually the biggest change most people (including me) make.</p>

<p>Octopress comes with only one theme, and different ones are not easy to find.
Thankfully the default one looks nice and is very well done.</p>

<p>Compare this with Wordpress, which has thousands of templates readily available, and your biggest problem is finding the right one.</p>

<h2>The ugly</h2>

<p>Right now, Octopress encourages you to fork the project to use it.
Whenever you want to update the &#8220;library&#8221;, you have to merge or rebase the remote changes and since there are no release tags, you most likely will do it against master.
You will also probably run into some conflicts, because some core files, like Rakefile, need to be modified to store configuration.</p>

<p>In my opinion Octopress should move to the same model that Nanoc uses.
It should be a gem, which is easily installable and upgradeable, and only the customizable files should go into the user&#8217;s project directory.
Instead of using Rake, it should provide its own commandline tool to accomplish common tasks like deployment or compiling the content.</p>

<h2>Conclusion</h2>

<p>Octopress is a great tool for programmers that want to start blogging without having to worry about customizing some static page generator or Wordpress.
It comes with beautiful syntax highlighting, responsive layout and useful plugins for integrating with applications like Disqus and Twitter.</p>

<p>The downside is that you should spend some time to customize the layout and styles, because most of the blogs that use it look very similar.</p>
]]></content>
  </entry>
  
</feed>
