<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Adam Pohorecki]]></title>
  <link href="http://adam.pohorecki.pl/atom.xml" rel="self"/>
  <link href="http://adam.pohorecki.pl/"/>
  <updated>2013-09-14T01:38:39+02:00</updated>
  <id>http://adam.pohorecki.pl/</id>
  <author>
    <name><![CDATA[Adam Pohorecki]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PPPPP talk at KRUG]]></title>
    <link href="http://adam.pohorecki.pl/blog/2013/07/15/ppppp-talk-at-krug/"/>
    <updated>2013-07-15T20:06:00+02:00</updated>
    <id>http://adam.pohorecki.pl/blog/2013/07/15/ppppp-talk-at-krug</id>
    <content type="html"><![CDATA[<p>On the 9th of July this year I gave a talk about Ping-Pong Pomodoro Pair Programming on <a href="http://www.meetup.com/Krakow-Ruby-Users-Group/">KRUG</a>.</p>

<h2>Ping-Pong Pomodoro Pair-Programming</h2>

<p><img class="right" src="http://adam.pohorecki.pl/images/ppppp/pair-programming.png"></p>

<p>I always wanted to do pair programming, but every time I tried, I failed to get much benefit out of it and I walked away tired and frustrated. I didn&#8217;t really know what I was doing wrong. Every time I raised questions at conferences about how to succeed at pair programming I didn&#8217;t get any good answers.</p>

<p>The problem is that pair programming is not that easy to get right. If you want to be successful doing it, you need to be at least twice as performant (for some definition of performance) as a single person. You also need to avoid burnout that comes with working harder than you would by yourself.</p>

<h2>Pomodoro</h2>

<p><img class="left" src="http://adam.pohorecki.pl/images/ppppp/pomodoro.png"></p>

<p>Thankfully I kept trying and at one point when programming with <a href="https://github.com/wrozka">Rudy</a> we started doing <a href="http://www.pomodorotechnique.com/">Pomodoro Technique</a> in addition to pair programming.</p>

<p>Pomodoro is a personal productivity technique that says you should concentrate on a single task for 25 minutes and than take a 5 minute break afterwards, with a longer, 20 minute break every 4 pomodoros.</p>

<p>It turned out that by using Pomodoro we not only got all the advantages of that technique (focus, work rythm, daily planning) but also <strong>we avoided the burnout that has followed pair programming</strong> for me before.</p>

<h2>Ping-Pong</h2>

<p><img class="right" src="http://adam.pohorecki.pl/images/ppppp/red-green-refactor.png"></p>

<p>Once we realized that frequent switching during coding keeps us both fully concentrated, we also added <a href="http://c2.com/cgi/wiki?PairProgrammingPingPongPattern">Ping-Pong</a> pair switching technique to the mix.</p>

<p>Ping-pong is a natural extension of TDD to pair programming. You switch at the keyboard for every part of the red-green-refactor cycle, with the first person writing a failing test, the second making it pass and the first person refactoring.</p>

<p>In traditional pair programming you switch at the keyboard every couple of minutes, but what I&#8217;ve found is that it is very easy for one person to keep typing for much longer than that. What I&#8217;ve also found is that <strong>after being away from the keyboard for about ten minutes your mind starts to drift away</strong> and you lose your focus on the code being written. With ping-pong we make sure that both of us are fully engaged and focused on the code that we are writing.</p>

<h2>The Presentation</h2>

<p>If you want to learn more about PPPPP, I recommend that you check out the full presentation below:</p>

<iframe width="600" height="338" src="http://adam.pohorecki.pl//www.youtube.com/embed/Qc_tehYzxI0?rel=0" frameborder="0" allowfullscreen></iframe>




<script async class="speakerdeck-embed" data-id="08530b10cb7601305ae10eeaf12a37c4" data-ratio="1.33333333333333" src="http://adam.pohorecki.pl//speakerdeck.com/assets/embed.js"></script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PPPPP talk at DRUG]]></title>
    <link href="http://adam.pohorecki.pl/blog/2013/06/27/ppppp-talk-at-drug/"/>
    <updated>2013-06-27T20:10:00+02:00</updated>
    <id>http://adam.pohorecki.pl/blog/2013/06/27/ppppp-talk-at-drug</id>
    <content type="html"><![CDATA[<p>Along with the <a href="http://adam.pohorecki.pl/blog/2013/06/27/bogus-talk-at-drug/">presentation about Bogus on DRUG</a> I also gave a lightning talk about the way I work every day with <a href="https://github.com/wrozka">Rudy</a>.</p>

<p>Most people I know don&#8217;t pair program at all or only do it occasionally and for a couple of hours or days at a time. We spend pretty much 100% of our time at work pair-programming. Heck, we actually have only one computer between us, so we can&#8217;t do it any other way, even if we wanted to.</p>

<p>While pair-programming itself is not really that hard, maintaining that way of working over an extended period of time is not trivial. We use a certain mix of techniques that allows us to do it and we call it PPPPP, which stands for Ping-Pong Pomodoro Pair-Programming.</p>

<h2>Pair Programming</h2>

<p>Many Extreme Programming techniques have managed to achieve mass adoption, but pair programming is not one of them. Most programmers I know use TDD, do continuous integration and work in iterations, but pair programming somehow does not have the same appeal.</p>

<p>Pair programming promotes shared code ownership, improves code quality and helps in knowledge sharing within a team. It gives you a line-by-line code review as you work, which lets you avoid making mistakes instead of correcting them after the fact. It even simplifies project management, because a team that does pair programming has half as many tasks in progress as a team that doesn&#8217;t.</p>

<p>Beneficial as it is, pair programming is also hard work, in a quite literal sense. Things that you take for granted, like taking breaks when you feel like it, checking email and RSS, spending an hour reading documentation, etc. are all gone. Pair programming forces you to concentrate on the task at hand pretty much the whole day, and that can be very tiring.</p>

<h2>Pomodoro</h2>

<p>Pomodoro is a technique where you concentrate for 25 minutes on a single task and nothing else (no checking email, IM, etc.). After every such iteration you get a 5 minute break. After every four iterations you get a longer break. You start each day by planning and estimating the tasks for the day and end with a short retrospective.</p>

<p>We use Pomodoro because of the rhythm it introduces. We no longer have to ask each other to stop working when we feel tired, because we know that in a couple of minutes we will have a few minutes to rest. It helps us maintain concentration during the day, because we only have to keep it for less than half an hour at a time. In short, it keeps us from getting burned out.</p>

<h2>Ping-Pong</h2>

<p>Once you start pair programming you will observe that once you spend more than a couple of minutes away from keyboard, you concentration flutters. To combat that we use a pairing technique called Ping-Pong.</p>

<p>When you write your code using TDD, you go through a well-known red-green-refactor cycle. In Ping-Pong, person A writes the failing test, then person B makes it pass and finally person A performs refactoring. Next cycle starts with person B, and so on and so forth.</p>

<p>This technique helps us maintain concentration and improves shared code ownership, because there&#8217;s never any code that &#8220;you wrote and I just watched&#8221;.</p>

<h2>Slides</h2>

<p>I apologize for the quality of the slides, but they were supposed to be more of a discussion starter than means of conveying information. Hopefully the ones from a talk I&#8217;m giving this month at KRUG will be more useful.</p>

<p><strong>EDIT:</strong></p>

<p>The <a href="http://adam.pohorecki.pl/blog/2013/07/15/ppppp-talk-at-krug/">slides and video from my PPPPP presentation at KRUG</a> are already available. Check them out if you are interested in learning more about this topic.</p>

<iframe class="slides" src="http://adam.pohorecki.pl/slides/embedder.html#/slides/ppppp-drug/" frameborder="0"></iframe>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bogus talk at DRUG]]></title>
    <link href="http://adam.pohorecki.pl/blog/2013/06/27/bogus-talk-at-drug/"/>
    <updated>2013-06-27T18:41:00+02:00</updated>
    <id>http://adam.pohorecki.pl/blog/2013/06/27/bogus-talk-at-drug</id>
    <content type="html"><![CDATA[<p>On the 20th of May this year I gave a talk about <a href="https://github.com/psyho/bogus/">Bogus</a> on <a href="http://drug.org.pl">DRUG</a>.</p>

<p>About a week earlier I gave a <a href="http://adam.pohorecki.pl/blog/2013/06/27/bogus-talk-at-krug/">longer talk with the same title</a> on KRUG, but even though I kept the title, the second presentation couldn&#8217;t be more different from the previous one. While the talk on KRUG was more encyclopedic and giving an overview of most of the Bogus&#8217;s features, on DRUG I decided to go with a more storyline-oriented approach to give people a better idea of what Bogus&#8217;s motivation is and why it really is a new generation mocking framework.</p>

<p>Event though this presentation does not fully describe the features of Bogus, it does show a few testing/implementation patterns and the problems you might run into (or avoid) with them.</p>

<p>I&#8217;m much happier with this presentation than the previous one, mainly because while safe stubbing is a very useful feature, it is also important to realize that the design of your system can have a huge impact on the reliability of your test suite.</p>

<iframe class="slides" src="http://adam.pohorecki.pl/slides/embedder.html#/slides/bogus-drug/" frameborder="0"></iframe>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bogus talk at KRUG]]></title>
    <link href="http://adam.pohorecki.pl/blog/2013/06/27/bogus-talk-at-krug/"/>
    <updated>2013-06-27T18:18:00+02:00</updated>
    <id>http://adam.pohorecki.pl/blog/2013/06/27/bogus-talk-at-krug</id>
    <content type="html"><![CDATA[<p>On the 14th of May this year I gave a talk about <a href="https://github.com/psyho/bogus/">Bogus</a>, my mocking library, at the local <a href="http://www.meetup.com/Krakow-Ruby-Users-Group/">Ruby Users Group</a>.</p>

<h2>Bogus</h2>

<p>Bogus is a mocking library that I&#8217;ve been working on for over a year now. It&#8217;s what I like to call a &#8220;new generation&#8221; mocking library, as opposed to gems like Mocha, RR or rspec-mocks, which represent the &#8220;old generation&#8221;.</p>

<p>What makes the new generation of mocking libraries different is the fact that it emphasizes safety. The new generation libraries won&#8217;t let you stub methods that don&#8217;t exist or with a wrong number of arguments. When creating test doubles, the new generation also tries to preserve the interface of a real collaborator, so that you don&#8217;t run into problems with API drift.</p>

<p>Bogus implements all of the aforementioned safety features and more. Our goal is to give you a much higher degree of confidence in your (isolated) unit tests and to speed up your builds by letting you get rid of unneeded integration tests.</p>

<h2>Slides</h2>

<iframe class="slides" src="http://adam.pohorecki.pl/slides/embedder.html#/slides/bogus-krug/" frameborder="0"></iframe>


<h2>Video</h2>

<iframe width="600" height="338" src="http://adam.pohorecki.pl//www.youtube.com/embed/XGT66XRXCwk?rel=0" frameborder="0" allowfullscreen></iframe>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS talk at meet.js]]></title>
    <link href="http://adam.pohorecki.pl/blog/2013/06/27/angularjs-talk-at-meet-dot-js/"/>
    <updated>2013-06-27T17:25:00+02:00</updated>
    <id>http://adam.pohorecki.pl/blog/2013/06/27/angularjs-talk-at-meet-dot-js</id>
    <content type="html"><![CDATA[<p>On the 20th of April this year I gave a talk at <a href="https://www.facebook.com/meetjspl">meet.js</a> about <a href="http://angularjs.org/">AngularJS</a>. It was a much shorter (30min vs 1h) version of the one I gave at the <a href="http://adam.pohorecki.pl/blog/2013/06/27/angularjs-talk-from-33rd-degree-conference/">33rd Degree Conference a month before</a>.</p>

<p>Since it was a JavaScript meetup, most of the listeners were already familiar with JS MVC frameworks, and a fair percentage of them was already familiar with AngularJS. That&#8217;s quite impressive if you consider there were well more than a hundred developers there.</p>

<p>Not having to explain that SPAs are now a viable choice for writing web applications saved me some precious minutes and there was a lot more audience participation than I usually encounter - a good sign that the people could relate to what I talked about.</p>

<p>If things progress the way they do with AngularJS adoption, maybe the next time I talk about it I will be able to talk about advanced application patterns in AngularJS instead of introducing it for the nth time:) Fingers crossed.</p>

<h2>Slides</h2>

<iframe class="slides" src="http://adam.pohorecki.pl/slides/embedder.html#/slides/angular-meetjs/" frameborder="0">
</iframe>


<p>The presentations on meet.js were not recorded, so there&#8217;s no video.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure talk at Lambda Lounge]]></title>
    <link href="http://adam.pohorecki.pl/blog/2013/06/27/clojure-talk-at-lambda-lounge/"/>
    <updated>2013-06-27T17:17:00+02:00</updated>
    <id>http://adam.pohorecki.pl/blog/2013/06/27/clojure-talk-at-lambda-lounge</id>
    <content type="html"><![CDATA[<p>On the 28th of March this year I gave a talk about <a href="http://clojure.org/">Clojure</a> on the inaugural meeting of <a href="http://www.meetup.com/Lambda-Lounge-Krakow/">Kraków&#8217;s Lambda Lounge</a>.</p>

<p>With the questions from the audience this talk run way too long - over an hour and a half. I definitely tried to cram too much content into the presentation - from protocols and multimethods, through macros, first-order functions, immutability to concurrency constructs. Most of those things really deserve a presentation of their own.</p>

<h2>Protocols and Multimethods</h2>

<p>If you ever used an Object-Oriented language like Ruby, you are probably familiar with the concept of polymorphism. Since Clojure is a functional language and it&#8217;s primary unit of composition is a function, you&#8217;d think that by using it you have to sacrifice polymorphic dispatch, but you don&#8217;t.</p>

<p>Even better, Clojure&#8217;s polymorphism is much more advanced than that of Ruby, and allows you to dispatch on arbitrary properties of any number of function arguments. Defining type relationships is also more powerful, since they can be defined on a per-function basis (if needed of course). Function-first approach also saves us the headaches of naming conflicts that could happen when including multiple modules into a class in Ruby.</p>

<h2>Functional Programming</h2>

<p>Functional programming is all the rage right now, but many people seem to think that it&#8217;s all about using first order functions. Once you get to use it however, you suddenly realize that the thing that makes the biggest difference is state management and immutability.</p>

<p>Immutability not only helps in multithreaded environments, but it also makes reasoning about code much easier, because any state change made very explicit by forcing functions to return updated data. This approach to handling state also helps testability by separating your code into the functional core (super easy to test), which you can unit test to your heart&#8217;s content and imperative shell (interaction with the external world, state management), which you can easily integration test, because there are only a couple of paths possible through it.</p>

<h2>Concurrency Constructs</h2>

<p>I spent a good deal of time in my presentation showing a laundry list of Clojure&#8217;s concurrency constructs, which certainly are plentiful and seem like a very nice addition to java.util.concurrent. So far I only used atoms, but I don&#8217;t really deal with multithreaded apps much, hopefully one day that will change:)</p>

<h2>Slides</h2>

<iframe class="slides" src="http://adam.pohorecki.pl/slides/embedder.html#/slides/clojure-lambda/" frameborder="0">
</iframe>


<p>The presentation unfortunately wasn&#8217;t recorded on video.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS talk from 33rd Degree Conference]]></title>
    <link href="http://adam.pohorecki.pl/blog/2013/06/27/angularjs-talk-from-33rd-degree-conference/"/>
    <updated>2013-06-27T15:52:00+02:00</updated>
    <id>http://adam.pohorecki.pl/blog/2013/06/27/angularjs-talk-from-33rd-degree-conference</id>
    <content type="html"><![CDATA[<p>On 15th of March this year I gave a talk about <a href="http://angularjs.org/">AngularJS</a> on the <a href="http://2013.33degree.org/">33rd Degree Conference</a>. Instead of trying to introduce the building blocks of AngularJS like I did a <a href="http://adam.pohorecki.pl/slides/angular/angular.html">couple of times before</a>, this time I tried to concentrate on the things that I consider the biggest advantages as compared to other JS MVC frameworks.</p>

<h2>Two-way data binding</h2>

<p>Something that really changed the way I write JS code is two-way data binding. It removes a ton of boilerplate code from your applications and allows you to completely remove the coupling of your controllers to DOM. Honestly, I can&#8217;t imagine using a framework that does not have this feature any more.</p>

<h2>AngularJS is POJO</h2>

<p>The code you write in AngularJS is mostly written in Plain Old JavaScript, without the need to inherit from any framework base classes or introducing a custom object model. This gives you a lot of freedom when it comes to modeling your domain, saving you from putting most of your logic on your &#8220;model classes&#8221;, which many other solutions seem to default to. The fact that pretty much all the code you write is Plain Old JavaScript Objects also helps a lot with testability, since isolating yourself from the framework is much easier if your are not inheriting from classes you don&#8217;t own.</p>

<h2>Slides</h2>

<iframe class="slides" src="http://adam.pohorecki.pl/slides/embedder.html#/slides/angular33/" frameborder="0">
</iframe>


<p>Unfortunately the talk was not recorded, so there&#8217;s no video, but I hope the slides alone will give you some idea what I talked about.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JS MVC Framework Fight at wroc_love.rb]]></title>
    <link href="http://adam.pohorecki.pl/blog/2013/06/27/js-mvc-framework-fight-at-wroclove-dot-rb/"/>
    <updated>2013-06-27T14:35:00+02:00</updated>
    <id>http://adam.pohorecki.pl/blog/2013/06/27/js-mvc-framework-fight-at-wroclove-dot-rb</id>
    <content type="html"><![CDATA[<p>On the 3rd of March this year I took part in a panel discussion (or more precisely: a &#8220;fight&#8221;) about the current state of JavaScript MVC frameworks on <a href="http://wrocloverb.com/">wroc_love.rb</a>. I represented <a href="http://angularjs.org/">AngularJS</a>, which is my framework of choice since early 2011. The other contenders were <a href="http://backbonejs.org/">Backbone.js</a>, <a href="http://emberjs.com/">Ember.js</a> and <a href="http://hexagonaljs.com/">Hexagonal.js</a>.</p>

<p>We discussed the role of single page apps, architecture, two-way data binding and a bunch of other stuff. The introduction slide I presented pretty much summarizes my position about how the frameworks in question compare to each other:</p>

<p><img src="http://adam.pohorecki.pl/slides/js-fight.jpg"></p>

<p>You can view the whole thing online on youtube:</p>

<iframe width="600" height="338" src="http://adam.pohorecki.pl//www.youtube.com/embed/h8XeZFW1Ad0" frameborder="0" allowfullscreen></iframe>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lean Startup]]></title>
    <link href="http://adam.pohorecki.pl/blog/2012/06/24/lean-startup/"/>
    <updated>2012-06-24T02:25:00+02:00</updated>
    <id>http://adam.pohorecki.pl/blog/2012/06/24/lean-startup</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://adam.pohorecki.pl/images/blog/lean-startup.png" title="Lean Startup cover" ></p>

<p>I recently read the <a href="http://theleanstartup.com/book">&#8220;Lean Startup&#8221; book by Eric Ries</a> which I can recommend to anyone involved in software development, not just people working with technology startups, like the title suggests.</p>

<p>The book describes a process, which can be used to make innovation more manageable and directed using the Lean Manufacturing principles combined with metrics-driven-development.
It is written with entrepreneurs in mind, but it also touches on topics such as Continuous Deployment and automated testing, which are important to me.</p>

<!--more-->


<h2>The problem solved by Lean Startup movement</h2>

<p>In my career, I have seen a certain mistake repeated too many times.
I call this mistake &#8220;feature overload&#8221;.
It happens when a product, based on someone&#8217;s arbitrary decision, is gradually extended with features that don&#8217;t necessarily add value, until it&#8217;s so slow and bloated that it has to be rewritten or fails altogether.</p>

<p>If you are a programmer, you might recognize this smell from code.
The principle of avoiding this kind of mistakes is called <a href="http://en.wikipedia.org/wiki/You_ain't_gonna_need_it">YAGNI</a> (You Ain&#8217;t Gonna Need It).</p>

<p>BDD advises that we write our User Stories in form &#8221;<strong>In order to&#8230;</strong>, As a &#8230;, I want to&#8230;&#8221;.
This first clause ensures, that the features we implement, are actually ones that are needed to improve the product.</p>

<p>Lean Startup takes this idea much further by applying scientific principles.
It obligates us to measure how the users react, and based on that, validate whether the feature actually brings value or not.
If a feature does not bring us closer to the goal, then it should be removed.</p>

<h2>Extending the Definition of Done (DoD)</h2>

<p>Typically, a Definition of Done in Scrum looks something like this:</p>

<ul>
<li>implemented</li>
<li>passed the code review</li>
<li>tested</li>
<li>accepted by the client</li>
<li>deployed</li>
</ul>


<p>Lean startup appends another item to that definition: &#8220;validated&#8221;.
This means that for every feature deployed you would run a <a href="http://en.wikipedia.org/wiki/A/B_testing">split test</a> with the feature enabled and disabled and based on the metrics gathered during the experiment, you would consider whether this feature is worth keeping or not.</p>

<p>It is worth noting that unvalidated features count toward the Work in Progress limit in Kanban, so this limits your development speed to how fast you can deploy and validate features, since only a limited number of split tests can usually be run at once.</p>

<h2>Continuous Deployment</h2>

<p>As you can probably see already, projects that take advantage of the Lean Startup methodology are ideal candidates for Continuous Delivery (or Deployment):</p>

<ul>
<li>If you need to a/b test everything, then you must have feature switches implemented.</li>
<li>If the process requires you to deploy often, you can&#8217;t probably just do that at the end of iteration.</li>
</ul>


<h2>TDD and Lean Startup</h2>

<p>Ron Jeffries wrote a blog post a couple of years ago about <a href="http://xprogramming.com/blog/what-is-really-essential/">why you can&#8217;t do iterative development without writing automated tests</a>.
It essentially states that if you want to release often, you need to test everything just as often, and that&#8217;s impossible to do that by hand.</p>

<p>Obviously, if you want to deploy each time a feature is implemented, this becomes even harder, so you need automated tests even more.</p>

<p>Ries in his book does agree with the fact that you need an extensive automated test suite, however he considers automated <em>unit</em> tests a from of waste and advocates writing end to end tests instead.</p>

<p>The opinion that isolated unit tests are of limited use is often heard amongst people who don&#8217;t practice TDD.
I believe in the opposite: isolated unit tests are the most valuable tests you can write, while the end-to-end tests are the ones that provide the least value.</p>

<h3>Tests are about feedback</h3>

<p>Imagine you have a test suite that takes an hour to run.
How often would you run it during your regular development?
Would you even run it locally?
I know I would not.</p>

<p>Now imagine your test suite takes 15 seconds to run (1-2s for unit tests and the rest for integration tests).
Would you run it locally?
Maybe even each time you save a file?</p>

<p>If you tests are slow, nobody runs them except for your CI server.
End to end tests tend to depend on the structure of your markup and often are brittle and unstable.</p>

<p>Fast tests give you confidence to change and refactor your code, and if you follow one simple rule of mocking (<strong>don&#8217;t mock what you don&#8217;t own</strong>), you will rarely fall into the trap of mocking too much.
When unit tests fail, they point you almost exactly to where the failure occurred, which reduces the time spent debugging.</p>

<p>I strongly believe that TDD is a technique that eliminates waste and makes rapid change possible. I think it should be a core practice for every lean startup.</p>

<h2>Cohort Analysis</h2>

<p>Cohort Analysis is a technique that I first read about in the Lean Startup book.
It is optimized to give you feedback on how the changes you introduce modify your user&#8217;s behavior.</p>

<p>For example, let&#8217;s say you implemented a feature that awards users certain amount of points when they visit the site each day.
Your hypothesis is that this will increase the user retention.</p>

<p>To validate your hypothesis you run a split test with the new feature enabled for some portion of the new users arriving at your website.
You measure how many users visit your site, register and how many of the registered has returned to the site at least 3 times.</p>

<p>At the end of the experiment, you present your metrics as a percentage of the overall number of visitors in the given segment.
In theory, the percentage of users who register should not vary significantly, but the percentage of users returning to the site should increase.</p>

<p>I really like how lean startup forces you to define your acceptance criteria in terms of things that can actually be measured.</p>

<h2>The 5 Whys</h2>

<p>Another interesting technique, which I first encountered in Eric Ries&#8217;s book is <a href="http://en.wikipedia.org/wiki/5_Whys">&#8220;The 5 Whys Technique&#8221;</a>.</p>

<p>It is a technique for determining the root cause of a problem by asking the question &#8220;Why&#8230;?&#8221; (kind of like children do) five times in a row.
You do this every time something goes wrong (like when you deploy not working software to production, or when you go over the WIP limit on a Kanban board).
Once you get answers to the 5 questions, you can apply an amount of effort proportional to the scale of the problem, to each of the problems that came up as answers to the questions.
This way you get to improve and make your process more resistant to failure, but you also make sure that you don&#8217;t spend too much time on things that don&#8217;t happen often or are not too important.</p>

<h2>Final remarks</h2>

<p>Agile development methodologies tell us to embrace change, which is a great step forward comparing to the old waterfall/change-request days.
However they do not give us a way to judge which features are more important, and which are not.
This is a problem, because it involves a lot of guesswork and politics.</p>

<p>Lean startup gives us a way of making feature decisions based on hard data and facilitates building the right product, not just a product the right way.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress - the Good, the Bad and the Ugly]]></title>
    <link href="http://adam.pohorecki.pl/blog/2012/01/17/octopress-the-good-the-bad-and-the-ugly/"/>
    <updated>2012-01-17T17:11:00+01:00</updated>
    <id>http://adam.pohorecki.pl/blog/2012/01/17/octopress-the-good-the-bad-and-the-ugly</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://adam.pohorecki.pl/images/blog/octopress.png" title="Octopress logo" ></p>

<p>To inaugurate my blog, I decided that I am going to review the tool, which I use to manage it - <a href="http://octopress.org">Octopress</a>, the self-proclaimed &#8220;blogging framework for hackers&#8221;.</p>

<p>I have been using Octopress to manage the <a href="http://sckrk.com">Software Craftsmanship in Kraków</a> blog for a couple of months now, and now I decided to use it for my personal blog.
This post will explain why I chose it, and what I don&#8217;t like about it.</p>

<!--more-->


<h2>TL;DR</h2>

<p>Octopress is great for programmers who want to take advantage of GitHub or Heroku for hosting their blog, it requires very little setup and comes &#8220;with batteries included&#8221;.</p>

<p>However, it should be made into a gem, because forking the project on GitHub and working on the same source tree as the developer feels more than a bit &#8220;hackish&#8221;.</p>

<h2>Using Octopress</h2>

<p>Octopress is a static site generator, that specializes in blogging, as oposed to some other solutions like <a href="http://nanoc.stoneship.org/">Nanoc</a>, which are more generic in nature.</p>

<p>If you want to use Octopress, you should either fork the repo on GitHub or add it as a remote to your existing repository.
After that all you need to do is invoke <code>rake install</code>, modify a few config values and you are ready to start adding content.</p>

<p>Deploying to various destinations can be done with <code>rake deploy</code> after some setup.
The setup modifies the Rakefile that comes with Octopress, which in turn generates conflicts when you update later.
Out of the box, Octopress supports GitHub Pages, Heroku and Rsync as deployment options.</p>

<h2>The good</h2>

<p>The very best feature of Octopress is the &#8220;batteries included&#8221; approach, which I mentioned earlier.</p>

<p>It comes with a bunch of plugins, like Twitter and GitHub integration, Disqus comments, deployment tasks and others.
The default template is mobile friendly, and will adjust according to the screen size.</p>

<p>Having so much from the get go saves you quite a lot of setup compared to some other solutions, so you can have a blog live in minutes after you install the tool.</p>

<p>Compared to Wordpress, Octopress is also much easier to customize, and the templates are much cleaner - it uses Mustache for templates and SASS for styles.
Also using Markdown for composing posts and VIM (does not come with Octopress;) for editing them is much more convenient than Wordpress&#8217;s WYSIWYG editor.</p>

<p>As a static page generator, Octopress also has the advantage of easily backing up the blog content and versioning it, especially compared to the database backed tools like Wordpress.
Now I have an (almost) full copy of the blog data everywhere I check it out and on GitHub.
This is a huge win, because you don&#8217;t want to worry about loosing your data.</p>

<p>Another great thing about Octopress is Solarized theme for syntax highlighting.
Check it out:</p>

<figure class='code'><figcaption><span>Sample of syntax highliting</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">hello_world</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Octopress is awesome!&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>The bad</h2>

<p>The biggest downside of Octopress for me is that <a href="http://sciruby.com/">almost</a> <a href="http://www.telenet.com.au/">every</a> <a href="http://jcsims.me/">blog</a> <a href="http://www.mariovisic.com/">which</a> <a href="http://hairysun.com/">uses</a> <a href="http://yagnesh.org/">it</a> <a href="http://nomedojogo.com/">looks</a> <a href="http://trucsdedev.com/">almost</a> <a href="http://duffomelia.com/">exactly</a> <a href="http://depth-first.com/">the</a> <a href="http://www.uru.ch/">same</a>.
You can customize colors very easily and even modify the templates that come with the default theme, but modifying colors is usually the biggest change most people (including me) make.</p>

<p>Octopress comes with only one theme, and different ones are not easy to find.
Thankfully the default one looks nice and is very well done.</p>

<p>Compare this with Wordpress, which has thousands of templates readily available, and your biggest problem is finding the right one.</p>

<h2>The ugly</h2>

<p>Right now, Octopress encourages you to fork the project to use it.
Whenever you want to update the &#8220;library&#8221;, you have to merge or rebase the remote changes and since there are no release tags, you most likely will do it against master.
You will also probably run into some conflicts, because some core files, like Rakefile, need to be modified to store configuration.</p>

<p>In my opinion Octopress should move to the same model that Nanoc uses.
It should be a gem, which is easily installable and upgradeable, and only the customizable files should go into the user&#8217;s project directory.
Instead of using Rake, it should provide its own commandline tool to accomplish common tasks like deployment or compiling the content.</p>

<h2>Conclusion</h2>

<p>Octopress is a great tool for programmers that want to start blogging without having to worry about customizing some static page generator or Wordpress.
It comes with beautiful syntax highlighting, responsive layout and useful plugins for integrating with applications like Disqus and Twitter.</p>

<p>The downside is that you should spend some time to customize the layout and styles, because most of the blogs that use it look very similar.</p>
]]></content>
  </entry>
  
</feed>
